{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ece-simulator/./src/variableStore.ts","webpack://ece-simulator/./src/config/gameConfig.ts","webpack://ece-simulator/./src/activities/activitySystem.ts","webpack://ece-simulator/./src/events/eventSystem.ts","webpack://ece-simulator/./src/gui/gameUI.ts"],"sourcesContent":["import { JsonObject, JsonEncodable, JsonValue } from \"./utils/json\";\n\ntype EncodedNumber = number | 'NaN' | 'Infinity' | '-Infinity';\n\nfunction isEncodedNumber(x: any): x is EncodedNumber {\n    if (typeof x === 'number') return true;\n    if (typeof x === 'string') {\n        return x === 'NaN' || x === 'Infinity' || x === '-Infinity';\n    }\n    return false;\n}\n\nfunction encodeNumber(x: number): EncodedNumber {\n    if (isNaN(x)) return 'NaN';\n    if (!isFinite(x)) return x > 0 ? \"Infinity\" : \"-Infinity\";\n    return x;\n}\n\nfunction decodeNumber(x: EncodedNumber) : number {\n    if (typeof x === 'string') {\n        if (x === 'NaN') return NaN;\n        if (x === 'Infinity') return Infinity;\n        if (x === '-Infinity') return -Infinity;\n        throw new Error('Unable to decode ' + x);\n    }\n    return x;\n}\n\nexport class VariableChangedEvent {\n\n    // Indicates whether all variables are cleared.\n    clear: boolean;\n    varName: string;\n    oldValue: number | undefined;\n    newValue: number;\n\n    constructor(clear: boolean, varName: string, oldValue: number | undefined, newValue: number) {\n        this.clear = clear;\n        this.varName = varName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n    }\n\n}\n\ntype VariableChangeHandler = (sender: VariableStore, event: VariableChangedEvent) => void;\n\nexport class VariableStore implements JsonEncodable {\n\n    private _variables: Record<string, number> = {\n        // Academic\n        gpa: 3.0,\n        semester: 1,\n        month: 1,\n        year: 1,\n        \n        // Skills\n        programming: 50,\n        hardware: 50,\n        research: 0,\n        internship: 0,\n        timeManagement: 50,\n        \n        // Resources\n        energy: 100,\n        stress: 0,\n        money: 1000\n    };\n\n    private _varLimits: Record<string, [number, number]> = {\n        gpa: [0, 4.0],\n        semester: [1, 8],\n        month: [1, 12],\n        year: [1, 4],\n        programming: [0, 100],\n        hardware: [0, 100],\n        research: [0, 100],\n        internship: [0, 100],\n        timeManagement: [0, 100],\n        energy: [0, 100],\n        stress: [0, 100],\n        money: [0, 10000]\n    };\n\n    /**\n     * Variable changed event handler.\n     */\n    onVariableChanged: VariableChangeHandler | undefined;\n\n    constructor() {}\n\n    /**\n     * Sets a numeric variable.\n     * @param varName Name of the variable.\n     * @param value Value.\n     * @param checkExistence Whether the existence of this variable should be\n     * checked first.\n     */\n    setVar(varName: string, value: number, checkExistence: boolean = false): void {\n        if (checkExistence && !(varName in this._variables)) {\n            throw new Error(`Variable \"${varName}\" does not exist.`);\n        }\n        if (this._varLimits[varName]) {\n            if (value > this._varLimits[varName][1]) {\n                value = this._varLimits[varName][1];\n            }\n            if (value < this._varLimits[varName][0]) {\n                value = this._varLimits[varName][0];\n            }\n        }\n        let oldValue = this._variables[varName];\n        this._variables[varName] = value;\n        if (oldValue !== value) {\n            const e = new VariableChangedEvent(false, varName, oldValue, value);\n            setTimeout(() => this.dispatchChangeEvent(e), 0);\n        }\n    }\n\n    /**\n     * Sets the lower bound and upper bound of a variable.\n     * @param varName Name of the variable.\n     * @param lb Lower bound.\n     * @param ub Upper bound.\n     */\n    setVarLimits(varName: string, lb: number, ub: number): void {\n        if (isNaN(lb)) throw new Error(\"Lower bound cannot be NaN\");\n        if (isNaN(ub)) throw new Error(\"Upper bound cannot be NaN\");\n        if (lb > ub) {\n            throw new Error('Lower bound cannot be greater than upper bound.');\n        }\n        this._varLimits[varName] = [lb, ub];\n        // Clamp the existing value if exists.\n        if (!(varName in this._variables)) return;\n        const oldValue = this._variables[varName];\n        if (oldValue < lb) {\n            this._variables[varName] = lb;\n            const e = new VariableChangedEvent(false, varName, oldValue, lb);\n            setTimeout(() => this.dispatchChangeEvent(e), 0);\n        } else if (oldValue > ub) {\n            this._variables[varName] = ub;\n            const e = new VariableChangedEvent(false, varName, oldValue, ub);\n            setTimeout(() => this.dispatchChangeEvent(e), 0);\n        }\n    }\n\n    /**\n     * Gets the lower bound and upper bound of a variable.\n     * If such bounds are not defined, [-Infinity, Infinity] will be returned.\n     * @param varName Name of the variable.\n     */\n    getVarLimits(varName: string): [number, number] {\n        let limits = this._varLimits[varName];\n        if (limits) {\n            return [limits[0], limits[1]];\n        } else {\n            return [-Infinity, Infinity];\n        }\n    }\n\n    getVar(varName: string, checkExistence: true): number;\n    getVar(varName: string, checkExistence: false): number | undefined;\n    getVar(varName: string, checkExistence: boolean = true): number | undefined {\n        let value = this._variables[varName];\n        if (value == undefined && checkExistence) {\n            throw new Error(`Variable \"${varName}\" does not exist.`);\n        }\n        return value;\n    }\n\n    /**\n     * Resets all variables.\n     */\n    reset(): void {\n        this.dispatchChangeEvent(new VariableChangedEvent(true, '', 0, 0));\n        this._variables = {};\n    }\n\n    dumpToConsole(): void {\n        let lines: string[] = [];\n        lines.push('[Variables (Limits)]');\n        for (let varName in this._variables) {\n            const limits = this._varLimits[varName];\n            const limitsStr = limits ? ` ([${limits[0]}, ${limits[1]}])` : '';\n            lines.push(`${varName}: ${this._variables[varName]}${limitsStr}`);\n        }\n        console.log(lines.join('\\n'));\n    }\n\n    decodeFromJson(json: JsonValue): void {\n        if (json === null || typeof json !== 'object' || Array.isArray(json)) {\n            throw new Error('Non-null JSON object expected.');\n        }\n        this.reset();\n        for (const varName in json) {\n            const varValue = json[varName];\n            if (isEncodedNumber(varValue)) {\n                this.setVar(varName, decodeNumber(varValue));\n            } else if (Array.isArray(varValue)) {\n                if (varValue.length !== 3) {\n                    throw new Error('Expect 3 elements: value, lower bound, upper bound.');\n                }\n                const [value, lb, ub] = varValue;\n                if (!isEncodedNumber(value)) {\n                    throw new Error('Invalid variable value.');\n                }\n                if (!isEncodedNumber(lb)) {\n                    throw new Error('Invalid variable lower bound.');\n                }\n                if (!isEncodedNumber(ub)) {\n                    throw new Error('Invalid variable upper bound.');\n                }\n                this.setVar(varName, decodeNumber(value));\n                this.setVarLimits(varName, decodeNumber(lb), decodeNumber(ub));\n            }\n        }\n    }\n\n    /**\n     * Encoding format:\n     * ```\n     * {\n     *     // With limits\n     *     \"varName1\": [$value1, $loweBound1, $upperBound1],\n     *     // Without limits\n     *     \"varName2\": $value2,\n     *     ...\n     * }\n     * ```\n     * Infinity, -Infinity, and NaN values are encoded as strings.\n     */\n    encodeAsJson(): JsonValue {\n        let json: JsonObject = {};\n        for (const varName in this._variables) {\n            const varValue: number = this._variables[varName];\n            if (varName in this._varLimits) {\n                const [lb, ub] = this._varLimits[varName];\n                json[varName] = [\n                    encodeNumber(varValue), encodeNumber(lb), encodeNumber(ub)\n                ];\n            } else {\n                json[varName] = encodeNumber(varValue);\n            }\n        }\n        return json;\n    }\n\n    protected dispatchChangeEvent(event: VariableChangedEvent) {\n        if (this.onVariableChanged) {\n            this.onVariableChanged(this, event);\n        }\n    }\n\n}\n","export const GAME_CONFIG = {\n    // Academic Settings\n    SEMESTER_LENGTH: 4, // months per semester (1-5, 8-12)\n    TOTAL_SEMESTERS: 8, // total semesters in the game\n    COURSES_PER_SEMESTER: 4, // typical number of courses per semester\n    \n    // Skill Settings\n    SKILL_GAIN_RATE: {\n        PROGRAMMING: 5, // per activity\n        HARDWARE: 5,\n        RESEARCH: 3,\n        INTERNSHIP: 4,\n        TIME_MANAGEMENT: 2,\n        LEETCODE: 8, // per problem solved\n        INTERVIEW_SKILLS: 4\n    },\n    \n    // Resource Settings\n    ENERGY_COST: {\n        CLASS: 10,\n        HOMEWORK: 15,\n        RESEARCH: 20,\n        INTERNSHIP: 25,\n        CLUB: 10,\n        LEETCODE: 12,\n        INTERVIEW_PREP: 15,\n        APPLY_JOBS: 8,\n        REST: -20 // negative means recovery\n    },\n    \n    // Stress Settings\n    STRESS_GAIN: {\n        CLASS: 5,\n        HOMEWORK: 10,\n        RESEARCH: 8,\n        INTERNSHIP: 12,\n        CLUB: 3,\n        LEETCODE: 8,\n        INTERVIEW_PREP: 15,\n        APPLY_JOBS: 10,\n        REST: -10\n    },\n    \n    // Money Settings\n    MONEY_GAIN: {\n        INTERNSHIP: 1000, // per month\n        RESEARCH: 500, // per month\n        CLUB: 0\n    },\n    \n    // GPA Impact\n    GPA_IMPACT: {\n        CLASS_ATTENDANCE: 0.1,\n        HOMEWORK_COMPLETION: 0.2,\n        EXAM_PERFORMANCE: 0.7\n    },\n\n    // Interview Success Rate\n    INTERVIEW_SUCCESS: {\n        BASE_RATE: 0.2, // base success rate\n        LEETCODE_BONUS: 0.1, // per 10 leetcode problems solved\n        INTERVIEW_PREP_BONUS: 0.15, // per interview prep session\n        MAX_BONUS: 0.5 // maximum bonus from preparation\n    },\n\n    // Random Events\n    RANDOM_EVENTS: {\n        PLAGIARISM_CHANCE: 0.1, // chance of getting caught for plagiarism\n        RESEARCH_OPPORTUNITY: 0.05, // chance of getting research opportunity\n        NETWORKING_CHANCE: 0.15, // chance of networking event\n        MENTOR_CHANCE: 0.03 // chance of finding a mentor\n    }\n}; ","import { VariableStore } from '../variableStore';\nimport { GAME_CONFIG } from '../config/gameConfig';\n\nexport interface Activity {\n    name: string;\n    description: string;\n    execute: (store: VariableStore) => void;\n    requirements?: {\n        energy: number;\n        skills?: Record<string, number>;\n    };\n}\n\nexport class ActivitySystem {\n    private store: VariableStore;\n    private leetcodeProblemsSolved: number = 0;\n    private interviewPrepSessions: number = 0;\n    \n    constructor(store: VariableStore) {\n        this.store = store;\n    }\n    \n    // Academic Activities\n    attendClass(): void {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        const gpa = this.store.getVar('gpa', false) || 0;\n        \n        if (energy < GAME_CONFIG.ENERGY_COST.CLASS) {\n            throw new Error('Not enough energy to attend class!');\n        }\n        \n        this.store.setVar('energy', energy - GAME_CONFIG.ENERGY_COST.CLASS, false);\n        this.store.setVar('stress', stress + GAME_CONFIG.STRESS_GAIN.CLASS, false);\n        // Small GPA boost for attending class\n        this.store.setVar('gpa', Math.min(4.0, gpa + 0.01), false);\n    }\n    \n    doHomework(): void {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        const programming = this.store.getVar('programming', false) || 0;\n        const gpa = this.store.getVar('gpa', false) || 0;\n        \n        if (energy < GAME_CONFIG.ENERGY_COST.HOMEWORK) {\n            throw new Error('Not enough energy to do homework!');\n        }\n        \n        this.store.setVar('energy', energy - GAME_CONFIG.ENERGY_COST.HOMEWORK, false);\n        this.store.setVar('stress', stress + GAME_CONFIG.STRESS_GAIN.HOMEWORK, false);\n        this.store.setVar('programming', programming + GAME_CONFIG.SKILL_GAIN_RATE.PROGRAMMING, false);\n        // Homework completion affects GPA\n        this.store.setVar('gpa', Math.min(4.0, gpa + 0.02), false);\n    }\n    \n    // Internship Preparation Activities\n    solveLeetcode(): void {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        const programming = this.store.getVar('programming', false) || 0;\n        \n        if (energy < GAME_CONFIG.ENERGY_COST.LEETCODE) {\n            throw new Error('Not enough energy to solve LeetCode problems!');\n        }\n        \n        this.store.setVar('energy', energy - GAME_CONFIG.ENERGY_COST.LEETCODE, false);\n        this.store.setVar('stress', stress + GAME_CONFIG.STRESS_GAIN.LEETCODE, false);\n        this.store.setVar('programming', programming + GAME_CONFIG.SKILL_GAIN_RATE.LEETCODE, false);\n        this.leetcodeProblemsSolved++;\n    }\n    \n    prepareForInterview(): void {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        \n        if (energy < GAME_CONFIG.ENERGY_COST.INTERVIEW_PREP) {\n            throw new Error('Not enough energy to prepare for interviews!');\n        }\n        \n        this.store.setVar('energy', energy - GAME_CONFIG.ENERGY_COST.INTERVIEW_PREP, false);\n        this.store.setVar('stress', stress + GAME_CONFIG.STRESS_GAIN.INTERVIEW_PREP, false);\n        this.interviewPrepSessions++;\n    }\n    \n    applyForJobs(): number {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        \n        if (energy < GAME_CONFIG.ENERGY_COST.APPLY_JOBS) {\n            throw new Error('Not enough energy to apply for jobs!');\n        }\n        \n        // Calculate interview success rate based on preparation\n        const leetcodeBonus = Math.min(\n            GAME_CONFIG.INTERVIEW_SUCCESS.MAX_BONUS,\n            (this.leetcodeProblemsSolved / 10) * GAME_CONFIG.INTERVIEW_SUCCESS.LEETCODE_BONUS\n        );\n        const prepBonus = Math.min(\n            GAME_CONFIG.INTERVIEW_SUCCESS.MAX_BONUS - leetcodeBonus,\n            this.interviewPrepSessions * GAME_CONFIG.INTERVIEW_SUCCESS.INTERVIEW_PREP_BONUS\n        );\n        const successRate = GAME_CONFIG.INTERVIEW_SUCCESS.BASE_RATE + leetcodeBonus + prepBonus;\n        \n        this.store.setVar('energy', energy - GAME_CONFIG.ENERGY_COST.APPLY_JOBS, false);\n        this.store.setVar('stress', stress + GAME_CONFIG.STRESS_GAIN.APPLY_JOBS, false);\n        \n        return successRate;\n    }\n    \n    // Research Activities\n    doResearch(): void {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        const research = this.store.getVar('research', false) || 0;\n        const money = this.store.getVar('money', false) || 0;\n        \n        if (energy < GAME_CONFIG.ENERGY_COST.RESEARCH) {\n            throw new Error('Not enough energy to do research!');\n        }\n        \n        this.store.setVar('energy', energy - GAME_CONFIG.ENERGY_COST.RESEARCH, false);\n        this.store.setVar('stress', stress + GAME_CONFIG.STRESS_GAIN.RESEARCH, false);\n        this.store.setVar('research', research + GAME_CONFIG.SKILL_GAIN_RATE.RESEARCH, false);\n        this.store.setVar('money', money + GAME_CONFIG.MONEY_GAIN.RESEARCH, false);\n    }\n    \n    // Club Activities\n    attendClub(): void {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        const timeManagement = this.store.getVar('timeManagement', false) || 0;\n        \n        if (energy < GAME_CONFIG.ENERGY_COST.CLUB) {\n            throw new Error('Not enough energy to attend club!');\n        }\n        \n        this.store.setVar('energy', energy - GAME_CONFIG.ENERGY_COST.CLUB, false);\n        this.store.setVar('stress', stress + GAME_CONFIG.STRESS_GAIN.CLUB, false);\n        this.store.setVar('timeManagement', timeManagement + GAME_CONFIG.SKILL_GAIN_RATE.TIME_MANAGEMENT, false);\n    }\n    \n    // Rest Activity\n    rest(): void {\n        const energy = this.store.getVar('energy', false) || 0;\n        const stress = this.store.getVar('stress', false) || 0;\n        \n        this.store.setVar('energy', Math.min(100, energy - GAME_CONFIG.ENERGY_COST.REST), false);\n        this.store.setVar('stress', Math.max(0, stress + GAME_CONFIG.STRESS_GAIN.REST), false);\n    }\n    \n    // Get all available activities\n    getAvailableActivities(): Activity[] {\n        const semester = this.store.getVar('semester', false) || 1;\n        const year = this.store.getVar('year', false) || 1;\n        \n        // Core ECE courses\n        const coreCourses = [\n            {\n                name: \"ECE 110 - Introduction to Electronics\",\n                description: \"Learn basic electronics concepts, circuit analysis, and lab skills.\",\n                requirements: { year: 1, semester: 1 },\n                effects: {\n                    hardware: 0.3,\n                    energy: -0.2,\n                    stress: 0.1\n                }\n            },\n            {\n                name: \"ECE 120 - Introduction to Computing\",\n                description: \"Study digital logic, computer organization, and assembly programming.\",\n                requirements: { year: 1, semester: 1 },\n                effects: {\n                    programming: 0.3,\n                    energy: -0.2,\n                    stress: 0.1\n                }\n            },\n            {\n                name: \"ECE 210 - Analog Signal Processing\",\n                description: \"Advanced circuit analysis, analog electronics, and signal processing.\",\n                requirements: { year: 1, semester: 2 },\n                effects: {\n                    hardware: 0.4,\n                    energy: -0.3,\n                    stress: 0.2\n                }\n            },\n            {\n                name: \"ECE 220 - Computer Systems & Programming\",\n                description: \"Computer architecture, C programming, and system design.\",\n                requirements: { year: 1, semester: 2 },\n                effects: {\n                    programming: 0.4,\n                    energy: -0.3,\n                    stress: 0.2\n                }\n            },\n            {\n                name: \"ECE 310 - Digital Signal Processing\",\n                description: \"Digital signal processing theory and applications.\",\n                requirements: { year: 2, semester: 1 },\n                effects: {\n                    hardware: 0.5,\n                    programming: 0.3,\n                    energy: -0.4,\n                    stress: 0.3\n                }\n            },\n            {\n                name: \"ECE 329 - Fields and Waves\",\n                description: \"Electromagnetic theory and applications.\",\n                requirements: { year: 2, semester: 1 },\n                effects: {\n                    hardware: 0.5,\n                    energy: -0.4,\n                    stress: 0.3\n                }\n            },\n            {\n                name: \"ECE 385 - Digital Systems Laboratory\",\n                description: \"FPGA design and digital system implementation.\",\n                requirements: { year: 2, semester: 2 },\n                effects: {\n                    hardware: 0.6,\n                    programming: 0.4,\n                    energy: -0.5,\n                    stress: 0.4\n                }\n            },\n            {\n                name: \"ECE 391 - Computer Systems Engineering\",\n                description: \"Operating systems, networking, and system programming.\",\n                requirements: { year: 2, semester: 2 },\n                effects: {\n                    programming: 0.6,\n                    energy: -0.5,\n                    stress: 0.4\n                }\n            }\n        ];\n\n        // Elective courses\n        const electiveCourses = [\n            {\n                name: \"ECE 408 - Applied Parallel Programming\",\n                description: \"Learn parallel computing and GPU programming.\",\n                requirements: { year: 3 },\n                effects: {\n                    programming: 0.7,\n                    energy: -0.4,\n                    stress: 0.3\n                }\n            },\n            {\n                name: \"ECE 445 - Senior Design Project\",\n                description: \"Capstone project course for ECE seniors.\",\n                requirements: { year: 4 },\n                effects: {\n                    hardware: 0.8,\n                    programming: 0.8,\n                    energy: -0.6,\n                    stress: 0.5\n                }\n            },\n            {\n                name: \"ECE 448 - Artificial Intelligence\",\n                description: \"Study AI algorithms and machine learning.\",\n                requirements: { year: 3 },\n                effects: {\n                    programming: 0.7,\n                    energy: -0.4,\n                    stress: 0.3\n                }\n            }\n        ];\n\n        // Research and Internship activities\n        const researchActivities = [\n            {\n                name: \"Join Research Lab\",\n                description: \"Work with professors on cutting-edge research projects.\",\n                requirements: { year: 2 },\n                effects: {\n                    research: 0.4,\n                    energy: -0.3,\n                    stress: 0.2\n                }\n            },\n            {\n                name: \"Summer Research Program\",\n                description: \"Full-time research during summer break.\",\n                requirements: { year: 2 },\n                effects: {\n                    research: 0.6,\n                    money: 3000,\n                    energy: -0.5,\n                    stress: 0.3\n                }\n            }\n        ];\n\n        const internshipActivities = [\n            {\n                name: \"Apply for Internships\",\n                description: \"Prepare resumes and interview for tech companies.\",\n                requirements: { year: 2 },\n                effects: {\n                    internship: 0.2,\n                    energy: -0.2,\n                    stress: 0.1\n                }\n            },\n            {\n                name: \"Summer Internship\",\n                description: \"Work at a tech company during summer break.\",\n                requirements: { year: 3 },\n                effects: {\n                    internship: 0.8,\n                    money: 8000,\n                    energy: -0.4,\n                    stress: 0.2\n                }\n            }\n        ];\n\n        // Study and social activities\n        const studyActivities = [\n            {\n                name: \"Study for Exams\",\n                description: \"Intensive study session for upcoming exams.\",\n                effects: {\n                    gpa: 0.1,\n                    energy: -0.3,\n                    stress: 0.2\n                }\n            },\n            {\n                name: \"Join Study Group\",\n                description: \"Collaborative learning with classmates.\",\n                effects: {\n                    gpa: 0.15,\n                    energy: -0.2,\n                    stress: -0.1\n                }\n            }\n        ];\n\n        const socialActivities = [\n            {\n                name: \"Attend ECE Social Events\",\n                description: \"Network with peers and professors.\",\n                effects: {\n                    stress: -0.2,\n                    energy: -0.1\n                }\n            },\n            {\n                name: \"Join ECE Student Organizations\",\n                description: \"Participate in IEEE, HKN, or other ECE clubs.\",\n                effects: {\n                    stress: -0.15,\n                    energy: -0.1\n                }\n            }\n        ];\n\n        // Combine all activities based on current semester/year\n        let availableActivities: Activity[] = [];\n\n        // Add core courses based on semester\n        coreCourses.forEach(course => {\n            if (course.requirements.year === year && course.requirements.semester === semester) {\n                availableActivities.push(this.createCourseActivity(course));\n            }\n        });\n\n        // Add elective courses\n        if (year >= 3) {\n            electiveCourses.forEach(course => {\n                if (course.requirements.year <= year) {\n                    availableActivities.push(this.createCourseActivity(course));\n                }\n            });\n        }\n\n        // Add research activities\n        if (year >= 2) {\n            researchActivities.forEach(activity => {\n                if (activity.requirements.year <= year) {\n                    availableActivities.push(this.createActivity(activity));\n                }\n            });\n        }\n\n        // Add internship activities\n        if (year >= 2) {\n            internshipActivities.forEach(activity => {\n                if (activity.requirements.year <= year) {\n                    availableActivities.push(this.createActivity(activity));\n                }\n            });\n        }\n\n        // Add study and social activities\n        studyActivities.forEach(activity => {\n            availableActivities.push(this.createActivity(activity));\n        });\n\n        socialActivities.forEach(activity => {\n            availableActivities.push(this.createActivity(activity));\n        });\n\n        return availableActivities;\n    }\n\n    private createCourseActivity(course: any): Activity {\n        return {\n            name: course.name,\n            description: course.description,\n            execute: (store: VariableStore) => {\n                // Check if student has enough energy\n                const energy = store.getVar('energy', false) || 1;\n                if (energy < 0.2) {\n                    throw new Error(\"You're too tired to take this course!\");\n                }\n\n                // Apply course effects\n                Object.entries(course.effects).forEach(([key, value]) => {\n                    const currentValue = store.getVar(key, false) || 0;\n                    store.setVar(key, currentValue + (value as number), false);\n                });\n\n                // Update GPA based on performance\n                const performance = Math.random() * 0.4 + 0.6; // Random performance between 0.6 and 1.0\n                const currentGPA = store.getVar('gpa', false) || 3.0;\n                const newGPA = (currentGPA + performance) / 2;\n                store.setVar('gpa', newGPA, false);\n            }\n        };\n    }\n\n    private createActivity(activity: any): Activity {\n        return {\n            name: activity.name,\n            description: activity.description,\n            execute: (store: VariableStore) => {\n                // Check if student has enough energy\n                const energy = store.getVar('energy', false) || 1;\n                if (energy < 0.2) {\n                    throw new Error(\"You're too tired for this activity!\");\n                }\n\n                // Apply activity effects\n                Object.entries(activity.effects).forEach(([key, value]) => {\n                    const currentValue = store.getVar(key, false) || 0;\n                    store.setVar(key, currentValue + (value as number), false);\n                });\n            }\n        };\n    }\n} ","import { VariableStore } from '../variableStore';\nimport { GAME_CONFIG } from '../config/gameConfig';\n\nexport interface GameEvent {\n    name: string;\n    description: string;\n    probability: number;\n    execute: (store: VariableStore) => void;\n}\n\nexport class EventSystem {\n    private store: VariableStore;\n    private events: GameEvent[];\n    \n    constructor(store: VariableStore) {\n        this.store = store;\n        this.events = this.initializeEvents();\n    }\n    \n    private initializeEvents(): GameEvent[] {\n        return [\n            // Academic Events\n            {\n                name: 'Plagiarism Check',\n                description: 'Your homework has been flagged for potential plagiarism!',\n                probability: GAME_CONFIG.RANDOM_EVENTS.PLAGIARISM_CHANCE,\n                execute: (store: VariableStore) => {\n                    const gpa = store.getVar('gpa', false) || 0;\n                    const stress = store.getVar('stress', false) || 0;\n                    store.setVar('gpa', Math.max(0, gpa - 0.5), false);\n                    store.setVar('stress', Math.min(100, stress + 30), false);\n                }\n            },\n            {\n                name: 'Research Opportunity',\n                description: 'A professor has noticed your good work and offered you a research position!',\n                probability: GAME_CONFIG.RANDOM_EVENTS.RESEARCH_OPPORTUNITY,\n                execute: (store: VariableStore) => {\n                    const research = store.getVar('research', false) || 0;\n                    const money = store.getVar('money', false) || 0;\n                    store.setVar('research', Math.min(100, research + 20), false);\n                    store.setVar('money', money + 1000, false);\n                }\n            },\n            {\n                name: 'Networking Event',\n                description: 'You\\'ve been invited to a networking event with industry professionals!',\n                probability: GAME_CONFIG.RANDOM_EVENTS.NETWORKING_CHANCE,\n                execute: (store: VariableStore) => {\n                    const internship = store.getVar('internship', false) || 0;\n                    store.setVar('internship', Math.min(100, internship + 15), false);\n                }\n            },\n            {\n                name: 'Mentor Found',\n                description: 'You\\'ve found a great mentor who can guide your career!',\n                probability: GAME_CONFIG.RANDOM_EVENTS.MENTOR_CHANCE,\n                execute: (store: VariableStore) => {\n                    const research = store.getVar('research', false) || 0;\n                    const internship = store.getVar('internship', false) || 0;\n                    store.setVar('research', Math.min(100, research + 10), false);\n                    store.setVar('internship', Math.min(100, internship + 10), false);\n                }\n            },\n            // Exam Events\n            {\n                name: 'Midterm Exam',\n                description: 'Time for midterm exams!',\n                probability: 0.25, // Higher probability during exam weeks\n                execute: (store: VariableStore) => {\n                    const gpa = store.getVar('gpa', false) || 0;\n                    const stress = store.getVar('stress', false) || 0;\n                    // Random performance between -0.3 and +0.3\n                    const performance = (Math.random() * 0.6) - 0.3;\n                    store.setVar('gpa', Math.max(0, Math.min(4.0, gpa + performance)), false);\n                    store.setVar('stress', Math.min(100, stress + 20), false);\n                }\n            },\n            // Social Events\n            {\n                name: 'Study Group',\n                description: 'Your classmates invite you to join their study group!',\n                probability: 0.2,\n                execute: (store: VariableStore) => {\n                    const gpa = store.getVar('gpa', false) || 0;\n                    const stress = store.getVar('stress', false) || 0;\n                    store.setVar('gpa', Math.min(4.0, gpa + 0.1), false);\n                    store.setVar('stress', Math.max(0, stress - 5), false);\n                }\n            }\n        ];\n    }\n    \n    public checkForEvents(): GameEvent[] {\n        const triggeredEvents: GameEvent[] = [];\n        \n        for (const event of this.events) {\n            if (Math.random() < event.probability) {\n                triggeredEvents.push(event);\n            }\n        }\n        \n        return triggeredEvents;\n    }\n    \n    public executeEvent(event: GameEvent): void {\n        event.execute(this.store);\n    }\n} ","import { VariableStore } from '../variableStore';\nimport { ActivitySystem, Activity } from '../activities/activitySystem';\nimport { EventSystem, GameEvent } from '../events/eventSystem';\nimport { GAME_CONFIG } from '../config/gameConfig';\n\nexport class GameUI {\n    private store: VariableStore;\n    private activitySystem: ActivitySystem;\n    private eventSystem: EventSystem;\n    \n    constructor() {\n        this.store = new VariableStore();\n        this.activitySystem = new ActivitySystem(this.store);\n        this.eventSystem = new EventSystem(this.store);\n        \n        // Set up variable change listener\n        this.store.onVariableChanged = this.handleVariableChange.bind(this);\n        \n        // Initialize UI\n        this.initializeUI();\n    }\n    \n    private initializeUI(): void {\n        // Set up activity cards\n        const activitiesGrid = document.getElementById('activities-grid');\n        if (activitiesGrid) {\n            const activities = this.activitySystem.getAvailableActivities();\n            activities.forEach(activity => {\n                const card = this.createActivityCard(activity);\n                activitiesGrid.appendChild(card);\n            });\n        }\n        \n        // Initial status update\n        this.updateAllStatus();\n    }\n    \n    private createActivityCard(activity: Activity): HTMLElement {\n        const card = document.createElement('div');\n        card.className = 'activity-card';\n        \n        const title = document.createElement('h4');\n        title.textContent = activity.name;\n        \n        const description = document.createElement('p');\n        description.textContent = activity.description;\n        \n        card.appendChild(title);\n        card.appendChild(description);\n        \n        card.addEventListener('click', () => this.handleActivityClick(activity));\n        \n        return card;\n    }\n    \n    private handleActivityClick(activity: Activity): void {\n        try {\n            activity.execute(this.store);\n            this.addEventToLog(`You chose to ${activity.name.toLowerCase()}`);\n            \n            // Check for random events\n            const events = this.eventSystem.checkForEvents();\n            events.forEach(event => {\n                this.eventSystem.executeEvent(event);\n                this.addEventToLog(event.description);\n            });\n            \n            // Update month\n            this.advanceMonth();\n            \n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                this.showMessage(error.message);\n            } else {\n                this.showMessage('An unexpected error occurred');\n            }\n        }\n    }\n    \n    private handleVariableChange(sender: VariableStore, event: any): void {\n        if (event.clear) {\n            this.updateAllStatus();\n        } else {\n            this.updateStatus(event.varName, event.newValue);\n        }\n    }\n    \n    private updateAllStatus(): void {\n        const variables = [\n            'gpa', 'semester', 'month', 'year',\n            'programming', 'hardware', 'research', 'internship',\n            'energy', 'stress', 'money'\n        ];\n        \n        variables.forEach(varName => {\n            const value = this.store.getVar(varName, false);\n            if (value !== undefined) {\n                this.updateStatus(varName, value);\n            }\n        });\n    }\n    \n    private updateStatus(varName: string, value: number): void {\n        const element = document.getElementById(varName);\n        if (element) {\n            if (varName === 'money') {\n                element.textContent = `$${Math.floor(value)}`;\n            } else {\n                element.textContent = value.toFixed(2);\n            }\n        }\n        \n        const progressElement = document.getElementById(`${varName}-progress`);\n        if (progressElement) {\n            const [min, max] = this.store.getVarLimits(varName);\n            const percentage = ((value - min) / (max - min)) * 100;\n            progressElement.style.width = `${percentage}%`;\n        }\n    }\n    \n    private advanceMonth(): void {\n        let month = this.store.getVar('month', false) || 1;\n        let semester = this.store.getVar('semester', false) || 1;\n        let year = this.store.getVar('year', false) || 1;\n        \n        month++;\n        if (month > GAME_CONFIG.SEMESTER_LENGTH) {\n            month = 1;\n            semester++;\n            if (semester > 2) { // 2 semesters per year\n                semester = 1;\n                year++;\n                if (year > 4) { // 4 years total\n                    this.showMessage('Congratulations! You have completed your ECE degree!');\n                    return;\n                }\n            }\n        }\n        \n        this.store.setVar('month', month, false);\n        this.store.setVar('semester', semester, false);\n        this.store.setVar('year', year, false);\n        \n        this.showMessage(`Starting month ${month} of semester ${semester}, year ${year}`);\n    }\n    \n    private addEventToLog(message: string): void {\n        const eventLog = document.getElementById('event-log-content');\n        if (eventLog) {\n            const eventItem = document.createElement('div');\n            eventItem.className = 'event-item';\n            eventItem.textContent = message;\n            eventLog.insertBefore(eventItem, eventLog.firstChild);\n        }\n    }\n    \n    private showMessage(message: string): void {\n        const messageBox = document.getElementById('message-box');\n        if (messageBox) {\n            messageBox.textContent = message;\n        }\n    }\n}\n\n// Initialize the game when the page loads\nwindow.addEventListener('load', () => {\n    new GameUI();\n}); "],"names":["isEncodedNumber","x","encodeNumber","isNaN","isFinite","decodeNumber","NaN","Infinity","Error","VariableChangedEvent","constructor","clear","varName","oldValue","newValue","this","VariableStore","_variables","gpa","semester","month","year","programming","hardware","research","internship","timeManagement","energy","stress","money","_varLimits","setVar","value","checkExistence","e","setTimeout","dispatchChangeEvent","setVarLimits","lb","ub","getVarLimits","limits","getVar","undefined","reset","dumpToConsole","lines","push","limitsStr","console","log","join","decodeFromJson","json","Array","isArray","varValue","length","encodeAsJson","event","onVariableChanged","GAME_CONFIG","ActivitySystem","store","leetcodeProblemsSolved","interviewPrepSessions","attendClass","Math","min","doHomework","solveLeetcode","prepareForInterview","applyForJobs","leetcodeBonus","prepBonus","successRate","doResearch","attendClub","rest","max","getAvailableActivities","availableActivities","name","description","requirements","effects","forEach","course","createCourseActivity","activity","createActivity","execute","Object","entries","key","currentValue","performance","random","newGPA","EventSystem","events","initializeEvents","probability","checkForEvents","triggeredEvents","executeEvent","GameUI","activitySystem","eventSystem","handleVariableChange","bind","initializeUI","activitiesGrid","document","getElementById","card","createActivityCard","appendChild","updateAllStatus","createElement","className","title","textContent","addEventListener","handleActivityClick","addEventToLog","toLowerCase","advanceMonth","error","showMessage","message","sender","updateStatus","element","floor","toFixed","progressElement","percentage","style","width","eventLog","eventItem","insertBefore","firstChild","messageBox","window"],"sourceRoot":""}